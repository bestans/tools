// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: template_base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bestan.Common.Config {

  /// <summary>Holder for reflection information generated from template_base.proto</summary>
  public static partial class TemplateBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for template_base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TemplateBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0ZW1wbGF0ZV9iYXNlLnByb3RvEhRiZXN0YW4uY29tbW9uLmNvbmZpZyIv",
            "Cg1leGNlbF9zZWN0aW9uEg8KB3NlY3Rpb24YASABKAwSDQoFaW5kZXgYAiAB",
            "KAUiSQoPZXhjZWxfcGF0aF9jZWxsEjYKCWNlbGxfcGF0aBgBIAMoCzIjLmJl",
            "c3Rhbi5jb21tb24uY29uZmlnLmV4Y2VsX3NlY3Rpb24iRwoPZXhjZWxfcGF0",
            "aF9mdWxsEjQKBXBhdGhzGAEgAygLMiUuYmVzdGFuLmNvbW1vbi5jb25maWcu",
            "ZXhjZWxfcGF0aF9jZWxsIoUCCg9leGNlbF9jZWxsX2RhdGESQgoJZGF0YV90",
            "eXBlGAEgASgOMi8uYmVzdGFuLmNvbW1vbi5jb25maWcuZXhjZWxfY2VsbF9k",
            "YXRhLkRBVEFfVFlQRRITCgtpbnQzMl92YWx1ZRgCIAEoBRITCgtpbnQ2NF92",
            "YWx1ZRgDIAEoAxITCgtieXRlc192YWx1ZRgEIAEoDBITCgtmbG9hdF92YWx1",
            "ZRgFIAEoAhIUCgxkb3VibGVfdmFsdWUYBiABKAEiRAoJREFUQV9UWVBFEgkK",
            "BUlOVDMyEAASCQoFSU5UNjQQARIKCgZTVFJJTkcQAhIJCgVGTE9BVBADEgoK",
            "BkRPVUJMRRAEIksKD2V4Y2VsX2xpbmVfZGF0YRI4CgljZWxsX2RhdGEYASAD",
            "KAsyJS5iZXN0YW4uY29tbW9uLmNvbmZpZy5leGNlbF9jZWxsX2RhdGEi7AEK",
            "C2V4Y2VsX3RhYmxlEhYKDnByb3RvX21zZ19uYW1lGAEgASgMEjMKBHBhdGgY",
            "AiABKAsyJS5iZXN0YW4uY29tbW9uLmNvbmZpZy5leGNlbF9wYXRoX2Z1bGwS",
            "OwoFdGFibGUYAyADKAsyLC5iZXN0YW4uY29tbW9uLmNvbmZpZy5leGNlbF90",
            "YWJsZS5UYWJsZUVudHJ5GlMKClRhYmxlRW50cnkSCwoDa2V5GAEgASgFEjQK",
            "BXZhbHVlGAIgASgLMiUuYmVzdGFuLmNvbW1vbi5jb25maWcuZXhjZWxfbGlu",
            "ZV9kYXRhOgI4ASKCAQoLZXhjZWxfcHJvdG8SQgoJYWxsX3Byb3RvGAEgAygL",
            "Mi8uYmVzdGFuLmNvbW1vbi5jb25maWcuZXhjZWxfcHJvdG8uQWxsUHJvdG9F",
            "bnRyeRovCg1BbGxQcm90b0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoDDoCOAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_section), global::Bestan.Common.Config.excel_section.Parser, new[]{ "Section", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_path_cell), global::Bestan.Common.Config.excel_path_cell.Parser, new[]{ "CellPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_path_full), global::Bestan.Common.Config.excel_path_full.Parser, new[]{ "Paths" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_cell_data), global::Bestan.Common.Config.excel_cell_data.Parser, new[]{ "DataType", "Int32Value", "Int64Value", "BytesValue", "FloatValue", "DoubleValue" }, null, new[]{ typeof(global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_line_data), global::Bestan.Common.Config.excel_line_data.Parser, new[]{ "CellData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_table), global::Bestan.Common.Config.excel_table.Parser, new[]{ "ProtoMsgName", "Path", "Table" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_proto), global::Bestan.Common.Config.excel_proto.Parser, new[]{ "AllProto" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class excel_section : pb::IMessage<excel_section> {
    private static readonly pb::MessageParser<excel_section> _parser = new pb::MessageParser<excel_section>(() => new excel_section());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_section> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_section() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_section(excel_section other) : this() {
      section_ = other.section_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_section Clone() {
      return new excel_section(this);
    }

    /// <summary>Field number for the "section" field.</summary>
    public const int SectionFieldNumber = 1;
    private pb::ByteString section_ = pb::ByteString.Empty;
    /// <summary>
    ///字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Section {
      get { return section_; }
      set {
        section_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///第几个元素
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_section);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_section other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Section != other.Section) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Section.Length != 0) hash ^= Section.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Section.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Section);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Section.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Section);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_section other) {
      if (other == null) {
        return;
      }
      if (other.Section.Length != 0) {
        Section = other.Section;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Section = input.ReadBytes();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_path_cell : pb::IMessage<excel_path_cell> {
    private static readonly pb::MessageParser<excel_path_cell> _parser = new pb::MessageParser<excel_path_cell>(() => new excel_path_cell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_path_cell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_cell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_cell(excel_path_cell other) : this() {
      cellPath_ = other.cellPath_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_cell Clone() {
      return new excel_path_cell(this);
    }

    /// <summary>Field number for the "cell_path" field.</summary>
    public const int CellPathFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.excel_section> _repeated_cellPath_codec
        = pb::FieldCodec.ForMessage(10, global::Bestan.Common.Config.excel_section.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.excel_section> cellPath_ = new pbc::RepeatedField<global::Bestan.Common.Config.excel_section>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.excel_section> CellPath {
      get { return cellPath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_path_cell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_path_cell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cellPath_.Equals(other.cellPath_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cellPath_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cellPath_.WriteTo(output, _repeated_cellPath_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cellPath_.CalculateSize(_repeated_cellPath_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_path_cell other) {
      if (other == null) {
        return;
      }
      cellPath_.Add(other.cellPath_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cellPath_.AddEntriesFrom(input, _repeated_cellPath_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_path_full : pb::IMessage<excel_path_full> {
    private static readonly pb::MessageParser<excel_path_full> _parser = new pb::MessageParser<excel_path_full>(() => new excel_path_full());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_path_full> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_full() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_full(excel_path_full other) : this() {
      paths_ = other.paths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_full Clone() {
      return new excel_path_full(this);
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.excel_path_cell> _repeated_paths_codec
        = pb::FieldCodec.ForMessage(10, global::Bestan.Common.Config.excel_path_cell.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.excel_path_cell> paths_ = new pbc::RepeatedField<global::Bestan.Common.Config.excel_path_cell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.excel_path_cell> Paths {
      get { return paths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_path_full);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_path_full other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paths_.Equals(other.paths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paths_.WriteTo(output, _repeated_paths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paths_.CalculateSize(_repeated_paths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_path_full other) {
      if (other == null) {
        return;
      }
      paths_.Add(other.paths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单元格数据
  /// </summary>
  public sealed partial class excel_cell_data : pb::IMessage<excel_cell_data> {
    private static readonly pb::MessageParser<excel_cell_data> _parser = new pb::MessageParser<excel_cell_data>(() => new excel_cell_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_cell_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_cell_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_cell_data(excel_cell_data other) : this() {
      dataType_ = other.dataType_;
      int32Value_ = other.int32Value_;
      int64Value_ = other.int64Value_;
      bytesValue_ = other.bytesValue_;
      floatValue_ = other.floatValue_;
      doubleValue_ = other.doubleValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_cell_data Clone() {
      return new excel_cell_data(this);
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 1;
    private global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE dataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "int32_value" field.</summary>
    public const int Int32ValueFieldNumber = 2;
    private int int32Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return int32Value_; }
      set {
        int32Value_ = value;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 3;
    private long int64Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return int64Value_; }
      set {
        int64Value_ = value;
      }
    }

    /// <summary>Field number for the "bytes_value" field.</summary>
    public const int BytesValueFieldNumber = 4;
    private pb::ByteString bytesValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return bytesValue_; }
      set {
        bytesValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 5;
    private float floatValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return floatValue_; }
      set {
        floatValue_ = value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 6;
    private double doubleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_cell_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_cell_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataType != other.DataType) return false;
      if (Int32Value != other.Int32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (BytesValue != other.BytesValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (Int32Value != 0) hash ^= Int32Value.GetHashCode();
      if (Int64Value != 0L) hash ^= Int64Value.GetHashCode();
      if (BytesValue.Length != 0) hash ^= BytesValue.GetHashCode();
      if (FloatValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (DoubleValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DataType);
      }
      if (Int32Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Int32Value);
      }
      if (Int64Value != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Int64Value);
      }
      if (BytesValue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(BytesValue);
      }
      if (FloatValue != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FloatValue);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DoubleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (Int32Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Value);
      }
      if (Int64Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (BytesValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (FloatValue != 0F) {
        size += 1 + 4;
      }
      if (DoubleValue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_cell_data other) {
      if (other == null) {
        return;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.Int32Value != 0) {
        Int32Value = other.Int32Value;
      }
      if (other.Int64Value != 0L) {
        Int64Value = other.Int64Value;
      }
      if (other.BytesValue.Length != 0) {
        BytesValue = other.BytesValue;
      }
      if (other.FloatValue != 0F) {
        FloatValue = other.FloatValue;
      }
      if (other.DoubleValue != 0D) {
        DoubleValue = other.DoubleValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            dataType_ = (global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Int32Value = input.ReadInt32();
            break;
          }
          case 24: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 34: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 45: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 49: {
            DoubleValue = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the excel_cell_data message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DATA_TYPE {
        [pbr::OriginalName("INT32")] Int32 = 0,
        [pbr::OriginalName("INT64")] Int64 = 1,
        [pbr::OriginalName("STRING")] String = 2,
        [pbr::OriginalName("FLOAT")] Float = 3,
        [pbr::OriginalName("DOUBLE")] Double = 4,
      }

    }
    #endregion

  }

  public sealed partial class excel_line_data : pb::IMessage<excel_line_data> {
    private static readonly pb::MessageParser<excel_line_data> _parser = new pb::MessageParser<excel_line_data>(() => new excel_line_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_line_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_line_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_line_data(excel_line_data other) : this() {
      cellData_ = other.cellData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_line_data Clone() {
      return new excel_line_data(this);
    }

    /// <summary>Field number for the "cell_data" field.</summary>
    public const int CellDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.excel_cell_data> _repeated_cellData_codec
        = pb::FieldCodec.ForMessage(10, global::Bestan.Common.Config.excel_cell_data.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.excel_cell_data> cellData_ = new pbc::RepeatedField<global::Bestan.Common.Config.excel_cell_data>();
    /// <summary>
    ///excel表中一行数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.excel_cell_data> CellData {
      get { return cellData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_line_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_line_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cellData_.Equals(other.cellData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cellData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cellData_.WriteTo(output, _repeated_cellData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cellData_.CalculateSize(_repeated_cellData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_line_data other) {
      if (other == null) {
        return;
      }
      cellData_.Add(other.cellData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cellData_.AddEntriesFrom(input, _repeated_cellData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_table : pb::IMessage<excel_table> {
    private static readonly pb::MessageParser<excel_table> _parser = new pb::MessageParser<excel_table>(() => new excel_table());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_table(excel_table other) : this() {
      protoMsgName_ = other.protoMsgName_;
      path_ = other.path_ != null ? other.path_.Clone() : null;
      table_ = other.table_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_table Clone() {
      return new excel_table(this);
    }

    /// <summary>Field number for the "proto_msg_name" field.</summary>
    public const int ProtoMsgNameFieldNumber = 1;
    private pb::ByteString protoMsgName_ = pb::ByteString.Empty;
    /// <summary>
    ///对应的proto消息名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProtoMsgName {
      get { return protoMsgName_; }
      set {
        protoMsgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private global::Bestan.Common.Config.excel_path_full path_;
    /// <summary>
    ///数据路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bestan.Common.Config.excel_path_full Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Bestan.Common.Config.excel_line_data>.Codec _map_table_codec
        = new pbc::MapField<int, global::Bestan.Common.Config.excel_line_data>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Bestan.Common.Config.excel_line_data.Parser), 26);
    private readonly pbc::MapField<int, global::Bestan.Common.Config.excel_line_data> table_ = new pbc::MapField<int, global::Bestan.Common.Config.excel_line_data>();
    /// <summary>
    ///excel表所有行数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Bestan.Common.Config.excel_line_data> Table {
      get { return table_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtoMsgName != other.ProtoMsgName) return false;
      if (!object.Equals(Path, other.Path)) return false;
      if (!Table.Equals(other.Table)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtoMsgName.Length != 0) hash ^= ProtoMsgName.GetHashCode();
      if (path_ != null) hash ^= Path.GetHashCode();
      hash ^= Table.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtoMsgName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ProtoMsgName);
      }
      if (path_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Path);
      }
      table_.WriteTo(output, _map_table_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtoMsgName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProtoMsgName);
      }
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      size += table_.CalculateSize(_map_table_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_table other) {
      if (other == null) {
        return;
      }
      if (other.ProtoMsgName.Length != 0) {
        ProtoMsgName = other.ProtoMsgName;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Bestan.Common.Config.excel_path_full();
        }
        Path.MergeFrom(other.Path);
      }
      table_.Add(other.table_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProtoMsgName = input.ReadBytes();
            break;
          }
          case 18: {
            if (path_ == null) {
              path_ = new global::Bestan.Common.Config.excel_path_full();
            }
            input.ReadMessage(path_);
            break;
          }
          case 26: {
            table_.AddEntriesFrom(input, _map_table_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_proto : pb::IMessage<excel_proto> {
    private static readonly pb::MessageParser<excel_proto> _parser = new pb::MessageParser<excel_proto>(() => new excel_proto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_proto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_proto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_proto(excel_proto other) : this() {
      allProto_ = other.allProto_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_proto Clone() {
      return new excel_proto(this);
    }

    /// <summary>Field number for the "all_proto" field.</summary>
    public const int AllProtoFieldNumber = 1;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_allProto_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 10);
    private readonly pbc::MapField<string, pb::ByteString> allProto_ = new pbc::MapField<string, pb::ByteString>();
    /// <summary>
    ///proto定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> AllProto {
      get { return allProto_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_proto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_proto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AllProto.Equals(other.AllProto)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AllProto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allProto_.WriteTo(output, _map_allProto_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allProto_.CalculateSize(_map_allProto_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_proto other) {
      if (other == null) {
        return;
      }
      allProto_.Add(other.allProto_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allProto_.AddEntriesFrom(input, _map_allProto_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
