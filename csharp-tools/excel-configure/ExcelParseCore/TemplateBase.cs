// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: template_base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bestan.Common.Config {

  /// <summary>Holder for reflection information generated from template_base.proto</summary>
  public static partial class TemplateBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for template_base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TemplateBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0ZW1wbGF0ZV9iYXNlLnByb3RvEhRiZXN0YW4uY29tbW9uLmNvbmZpZyLH",
            "AQoNZXhjZWxfc2VjdGlvbhIPCgdzZWN0aW9uGAEgASgJEg0KBWluZGV4GAIg",
            "ASgFEkAKCWRhdGFfdHlwZRgDIAEoDjItLmJlc3Rhbi5jb21tb24uY29uZmln",
            "LmV4Y2VsX3NlY3Rpb24uREFUQV9UWVBFEg4KBnZhbHVlMhgEIAEoBSJECglE",
            "QVRBX1RZUEUSCQoFSU5UMzIQABIJCgVJTlQ2NBABEgoKBlNUUklORxACEgkK",
            "BUZMT0FUEAMSCgoGRE9VQkxFEAQiSQoPZXhjZWxfcGF0aF9jZWxsEjYKCWNl",
            "bGxfcGF0aBgBIAMoCzIjLmJlc3Rhbi5jb21tb24uY29uZmlnLmV4Y2VsX3Nl",
            "Y3Rpb24iRwoPZXhjZWxfcGF0aF9mdWxsEjQKBXBhdGhzGAEgAygLMiUuYmVz",
            "dGFuLmNvbW1vbi5jb25maWcuZXhjZWxfcGF0aF9jZWxsIoUCCg9leGNlbF9j",
            "ZWxsX2RhdGESQgoJZGF0YV90eXBlGAEgASgOMi8uYmVzdGFuLmNvbW1vbi5j",
            "b25maWcuZXhjZWxfY2VsbF9kYXRhLkRBVEFfVFlQRRITCgtpbnQzMl92YWx1",
            "ZRgCIAEoBRITCgtpbnQ2NF92YWx1ZRgDIAEoAxITCgtieXRlc192YWx1ZRgE",
            "IAEoDBITCgtmbG9hdF92YWx1ZRgFIAEoAhIUCgxkb3VibGVfdmFsdWUYBiAB",
            "KAEiRAoJREFUQV9UWVBFEgkKBUlOVDMyEAASCQoFSU5UNjQQARIKCgZTVFJJ",
            "TkcQAhIJCgVGTE9BVBADEgoKBkRPVUJMRRAEIksKD2V4Y2VsX2xpbmVfZGF0",
            "YRI4CgljZWxsX2RhdGEYASADKAsyJS5iZXN0YW4uY29tbW9uLmNvbmZpZy5l",
            "eGNlbF9jZWxsX2RhdGEiQgoLZXhjZWxfdGFibGUSMwoEcGF0aBgBIAEoCzIl",
            "LmJlc3Rhbi5jb21tb24uY29uZmlnLmV4Y2VsX3BhdGhfZnVsbCKPAQoLZXhj",
            "ZWxfcHJvdG8SQgoJYWxsX3Byb3RvGAEgAygLMi8uYmVzdGFuLmNvbW1vbi5j",
            "b25maWcuZXhjZWxfcHJvdG8uQWxsUHJvdG9FbnRyeRILCgNtZDUYAiABKAka",
            "LwoNQWxsUHJvdG9FbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAw6",
            "AjgBIqEBCgt0ZXN0X3B5dGhvbhIKCgJpZBgBIAEoAxINCgVjb3VudBgCIAEo",
            "CRJACg9za2lsbF9pbmZvX2xpc3QYAyADKAsyJy5iZXN0YW4uY29tbW9uLmNv",
            "bmZpZy50ZXN0X3B5dGhvbi5za2lsbBISCgp2YWx1ZV9saXN0GAQgAygFGiEK",
            "BXNraWxsEgoKAmlkGAEgASgBEgwKBHJhdGUYAiABKAUiqQEKD3Rlc3RfcHl0",
            "aG9uX2FsbBJDCgdjb25maWdzGAEgAygLMjIuYmVzdGFuLmNvbW1vbi5jb25m",
            "aWcudGVzdF9weXRob25fYWxsLkNvbmZpZ3NFbnRyeRpRCgxDb25maWdzRW50",
            "cnkSCwoDa2V5GAEgASgFEjAKBXZhbHVlGAIgASgLMiEuYmVzdGFuLmNvbW1v",
            "bi5jb25maWcudGVzdF9weXRob246AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_section), global::Bestan.Common.Config.excel_section.Parser, new[]{ "Section", "Index", "DataType", "Value2" }, null, new[]{ typeof(global::Bestan.Common.Config.excel_section.Types.DATA_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_path_cell), global::Bestan.Common.Config.excel_path_cell.Parser, new[]{ "CellPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_path_full), global::Bestan.Common.Config.excel_path_full.Parser, new[]{ "Paths" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_cell_data), global::Bestan.Common.Config.excel_cell_data.Parser, new[]{ "DataType", "Int32Value", "Int64Value", "BytesValue", "FloatValue", "DoubleValue" }, null, new[]{ typeof(global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_line_data), global::Bestan.Common.Config.excel_line_data.Parser, new[]{ "CellData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_table), global::Bestan.Common.Config.excel_table.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.excel_proto), global::Bestan.Common.Config.excel_proto.Parser, new[]{ "AllProto", "Md5" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.test_python), global::Bestan.Common.Config.test_python.Parser, new[]{ "Id", "Count", "SkillInfoList", "ValueList" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.test_python.Types.skill), global::Bestan.Common.Config.test_python.Types.skill.Parser, new[]{ "Id", "Rate" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bestan.Common.Config.test_python_all), global::Bestan.Common.Config.test_python_all.Parser, new[]{ "Configs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class excel_section : pb::IMessage<excel_section> {
    private static readonly pb::MessageParser<excel_section> _parser = new pb::MessageParser<excel_section>(() => new excel_section());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_section> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_section() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_section(excel_section other) : this() {
      section_ = other.section_;
      index_ = other.index_;
      dataType_ = other.dataType_;
      value2_ = other.value2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_section Clone() {
      return new excel_section(this);
    }

    /// <summary>Field number for the "section" field.</summary>
    public const int SectionFieldNumber = 1;
    private string section_ = "";
    /// <summary>
    ///字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Section {
      get { return section_; }
      set {
        section_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///第几个元素
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 3;
    private global::Bestan.Common.Config.excel_section.Types.DATA_TYPE dataType_ = 0;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bestan.Common.Config.excel_section.Types.DATA_TYPE DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "value2" field.</summary>
    public const int Value2FieldNumber = 4;
    private int value2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value2 {
      get { return value2_; }
      set {
        value2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_section);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_section other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Section != other.Section) return false;
      if (Index != other.Index) return false;
      if (DataType != other.DataType) return false;
      if (Value2 != other.Value2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Section.Length != 0) hash ^= Section.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (Value2 != 0) hash ^= Value2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Section.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Section);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (DataType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DataType);
      }
      if (Value2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Value2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Section.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Section);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (Value2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_section other) {
      if (other == null) {
        return;
      }
      if (other.Section.Length != 0) {
        Section = other.Section;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.Value2 != 0) {
        Value2 = other.Value2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Section = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            dataType_ = (global::Bestan.Common.Config.excel_section.Types.DATA_TYPE) input.ReadEnum();
            break;
          }
          case 32: {
            Value2 = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the excel_section message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DATA_TYPE {
        [pbr::OriginalName("INT32")] Int32 = 0,
        [pbr::OriginalName("INT64")] Int64 = 1,
        [pbr::OriginalName("STRING")] String = 2,
        [pbr::OriginalName("FLOAT")] Float = 3,
        [pbr::OriginalName("DOUBLE")] Double = 4,
      }

    }
    #endregion

  }

  public sealed partial class excel_path_cell : pb::IMessage<excel_path_cell> {
    private static readonly pb::MessageParser<excel_path_cell> _parser = new pb::MessageParser<excel_path_cell>(() => new excel_path_cell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_path_cell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_cell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_cell(excel_path_cell other) : this() {
      cellPath_ = other.cellPath_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_cell Clone() {
      return new excel_path_cell(this);
    }

    /// <summary>Field number for the "cell_path" field.</summary>
    public const int CellPathFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.excel_section> _repeated_cellPath_codec
        = pb::FieldCodec.ForMessage(10, global::Bestan.Common.Config.excel_section.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.excel_section> cellPath_ = new pbc::RepeatedField<global::Bestan.Common.Config.excel_section>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.excel_section> CellPath {
      get { return cellPath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_path_cell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_path_cell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cellPath_.Equals(other.cellPath_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cellPath_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cellPath_.WriteTo(output, _repeated_cellPath_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cellPath_.CalculateSize(_repeated_cellPath_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_path_cell other) {
      if (other == null) {
        return;
      }
      cellPath_.Add(other.cellPath_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cellPath_.AddEntriesFrom(input, _repeated_cellPath_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_path_full : pb::IMessage<excel_path_full> {
    private static readonly pb::MessageParser<excel_path_full> _parser = new pb::MessageParser<excel_path_full>(() => new excel_path_full());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_path_full> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_full() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_full(excel_path_full other) : this() {
      paths_ = other.paths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_path_full Clone() {
      return new excel_path_full(this);
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.excel_path_cell> _repeated_paths_codec
        = pb::FieldCodec.ForMessage(10, global::Bestan.Common.Config.excel_path_cell.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.excel_path_cell> paths_ = new pbc::RepeatedField<global::Bestan.Common.Config.excel_path_cell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.excel_path_cell> Paths {
      get { return paths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_path_full);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_path_full other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paths_.Equals(other.paths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paths_.WriteTo(output, _repeated_paths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paths_.CalculateSize(_repeated_paths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_path_full other) {
      if (other == null) {
        return;
      }
      paths_.Add(other.paths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单元格数据
  /// </summary>
  public sealed partial class excel_cell_data : pb::IMessage<excel_cell_data> {
    private static readonly pb::MessageParser<excel_cell_data> _parser = new pb::MessageParser<excel_cell_data>(() => new excel_cell_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_cell_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_cell_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_cell_data(excel_cell_data other) : this() {
      dataType_ = other.dataType_;
      int32Value_ = other.int32Value_;
      int64Value_ = other.int64Value_;
      bytesValue_ = other.bytesValue_;
      floatValue_ = other.floatValue_;
      doubleValue_ = other.doubleValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_cell_data Clone() {
      return new excel_cell_data(this);
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 1;
    private global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE dataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "int32_value" field.</summary>
    public const int Int32ValueFieldNumber = 2;
    private int int32Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return int32Value_; }
      set {
        int32Value_ = value;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 3;
    private long int64Value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return int64Value_; }
      set {
        int64Value_ = value;
      }
    }

    /// <summary>Field number for the "bytes_value" field.</summary>
    public const int BytesValueFieldNumber = 4;
    private pb::ByteString bytesValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return bytesValue_; }
      set {
        bytesValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 5;
    private float floatValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return floatValue_; }
      set {
        floatValue_ = value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 6;
    private double doubleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_cell_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_cell_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataType != other.DataType) return false;
      if (Int32Value != other.Int32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (BytesValue != other.BytesValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (Int32Value != 0) hash ^= Int32Value.GetHashCode();
      if (Int64Value != 0L) hash ^= Int64Value.GetHashCode();
      if (BytesValue.Length != 0) hash ^= BytesValue.GetHashCode();
      if (FloatValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (DoubleValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DataType);
      }
      if (Int32Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Int32Value);
      }
      if (Int64Value != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Int64Value);
      }
      if (BytesValue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(BytesValue);
      }
      if (FloatValue != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FloatValue);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DoubleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (Int32Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Value);
      }
      if (Int64Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (BytesValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (FloatValue != 0F) {
        size += 1 + 4;
      }
      if (DoubleValue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_cell_data other) {
      if (other == null) {
        return;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.Int32Value != 0) {
        Int32Value = other.Int32Value;
      }
      if (other.Int64Value != 0L) {
        Int64Value = other.Int64Value;
      }
      if (other.BytesValue.Length != 0) {
        BytesValue = other.BytesValue;
      }
      if (other.FloatValue != 0F) {
        FloatValue = other.FloatValue;
      }
      if (other.DoubleValue != 0D) {
        DoubleValue = other.DoubleValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            dataType_ = (global::Bestan.Common.Config.excel_cell_data.Types.DATA_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Int32Value = input.ReadInt32();
            break;
          }
          case 24: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 34: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 45: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 49: {
            DoubleValue = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the excel_cell_data message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DATA_TYPE {
        [pbr::OriginalName("INT32")] Int32 = 0,
        [pbr::OriginalName("INT64")] Int64 = 1,
        [pbr::OriginalName("STRING")] String = 2,
        [pbr::OriginalName("FLOAT")] Float = 3,
        [pbr::OriginalName("DOUBLE")] Double = 4,
      }

    }
    #endregion

  }

  public sealed partial class excel_line_data : pb::IMessage<excel_line_data> {
    private static readonly pb::MessageParser<excel_line_data> _parser = new pb::MessageParser<excel_line_data>(() => new excel_line_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_line_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_line_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_line_data(excel_line_data other) : this() {
      cellData_ = other.cellData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_line_data Clone() {
      return new excel_line_data(this);
    }

    /// <summary>Field number for the "cell_data" field.</summary>
    public const int CellDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.excel_cell_data> _repeated_cellData_codec
        = pb::FieldCodec.ForMessage(10, global::Bestan.Common.Config.excel_cell_data.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.excel_cell_data> cellData_ = new pbc::RepeatedField<global::Bestan.Common.Config.excel_cell_data>();
    /// <summary>
    ///excel表中一行数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.excel_cell_data> CellData {
      get { return cellData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_line_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_line_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cellData_.Equals(other.cellData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cellData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cellData_.WriteTo(output, _repeated_cellData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cellData_.CalculateSize(_repeated_cellData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_line_data other) {
      if (other == null) {
        return;
      }
      cellData_.Add(other.cellData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cellData_.AddEntriesFrom(input, _repeated_cellData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_table : pb::IMessage<excel_table> {
    private static readonly pb::MessageParser<excel_table> _parser = new pb::MessageParser<excel_table>(() => new excel_table());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_table(excel_table other) : this() {
      path_ = other.path_ != null ? other.path_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_table Clone() {
      return new excel_table(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private global::Bestan.Common.Config.excel_path_full path_;
    /// <summary>
    ///数据路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bestan.Common.Config.excel_path_full Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Path, other.Path)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (path_ != null) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (path_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_table other) {
      if (other == null) {
        return;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Bestan.Common.Config.excel_path_full();
        }
        Path.MergeFrom(other.Path);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (path_ == null) {
              path_ = new global::Bestan.Common.Config.excel_path_full();
            }
            input.ReadMessage(path_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class excel_proto : pb::IMessage<excel_proto> {
    private static readonly pb::MessageParser<excel_proto> _parser = new pb::MessageParser<excel_proto>(() => new excel_proto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<excel_proto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_proto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_proto(excel_proto other) : this() {
      allProto_ = other.allProto_.Clone();
      md5_ = other.md5_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public excel_proto Clone() {
      return new excel_proto(this);
    }

    /// <summary>Field number for the "all_proto" field.</summary>
    public const int AllProtoFieldNumber = 1;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_allProto_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 10);
    private readonly pbc::MapField<string, pb::ByteString> allProto_ = new pbc::MapField<string, pb::ByteString>();
    /// <summary>
    ///proto定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> AllProto {
      get { return allProto_; }
    }

    /// <summary>Field number for the "md5" field.</summary>
    public const int Md5FieldNumber = 2;
    private string md5_ = "";
    /// <summary>
    ///proto MD5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Md5 {
      get { return md5_; }
      set {
        md5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as excel_proto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(excel_proto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AllProto.Equals(other.AllProto)) return false;
      if (Md5 != other.Md5) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AllProto.GetHashCode();
      if (Md5.Length != 0) hash ^= Md5.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allProto_.WriteTo(output, _map_allProto_codec);
      if (Md5.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Md5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allProto_.CalculateSize(_map_allProto_codec);
      if (Md5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(excel_proto other) {
      if (other == null) {
        return;
      }
      allProto_.Add(other.allProto_);
      if (other.Md5.Length != 0) {
        Md5 = other.Md5;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allProto_.AddEntriesFrom(input, _map_allProto_codec);
            break;
          }
          case 18: {
            Md5 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class test_python : pb::IMessage<test_python> {
    private static readonly pb::MessageParser<test_python> _parser = new pb::MessageParser<test_python>(() => new test_python());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<test_python> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test_python() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test_python(test_python other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      skillInfoList_ = other.skillInfoList_.Clone();
      valueList_ = other.valueList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test_python Clone() {
      return new test_python(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private string count_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Count {
      get { return count_; }
      set {
        count_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill_info_list" field.</summary>
    public const int SkillInfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bestan.Common.Config.test_python.Types.skill> _repeated_skillInfoList_codec
        = pb::FieldCodec.ForMessage(26, global::Bestan.Common.Config.test_python.Types.skill.Parser);
    private readonly pbc::RepeatedField<global::Bestan.Common.Config.test_python.Types.skill> skillInfoList_ = new pbc::RepeatedField<global::Bestan.Common.Config.test_python.Types.skill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bestan.Common.Config.test_python.Types.skill> SkillInfoList {
      get { return skillInfoList_; }
    }

    /// <summary>Field number for the "value_list" field.</summary>
    public const int ValueListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_valueList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> valueList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ValueList {
      get { return valueList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as test_python);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(test_python other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if(!skillInfoList_.Equals(other.skillInfoList_)) return false;
      if(!valueList_.Equals(other.valueList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Count.Length != 0) hash ^= Count.GetHashCode();
      hash ^= skillInfoList_.GetHashCode();
      hash ^= valueList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Count.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Count);
      }
      skillInfoList_.WriteTo(output, _repeated_skillInfoList_codec);
      valueList_.WriteTo(output, _repeated_valueList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Count.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Count);
      }
      size += skillInfoList_.CalculateSize(_repeated_skillInfoList_codec);
      size += valueList_.CalculateSize(_repeated_valueList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(test_python other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Count.Length != 0) {
        Count = other.Count;
      }
      skillInfoList_.Add(other.skillInfoList_);
      valueList_.Add(other.valueList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Count = input.ReadString();
            break;
          }
          case 26: {
            skillInfoList_.AddEntriesFrom(input, _repeated_skillInfoList_codec);
            break;
          }
          case 34:
          case 32: {
            valueList_.AddEntriesFrom(input, _repeated_valueList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the test_python message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class skill : pb::IMessage<skill> {
        private static readonly pb::MessageParser<skill> _parser = new pb::MessageParser<skill>(() => new skill());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<skill> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bestan.Common.Config.test_python.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public skill() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public skill(skill other) : this() {
          id_ = other.id_;
          rate_ = other.rate_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public skill Clone() {
          return new skill(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private double id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "rate" field.</summary>
        public const int RateFieldNumber = 2;
        private int rate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rate {
          get { return rate_; }
          set {
            rate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as skill);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(skill other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Id, other.Id)) return false;
          if (Rate != other.Rate) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Id);
          if (Rate != 0) hash ^= Rate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Id);
          }
          if (Rate != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Rate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0D) {
            size += 1 + 8;
          }
          if (Rate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(skill other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0D) {
            Id = other.Id;
          }
          if (other.Rate != 0) {
            Rate = other.Rate;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Id = input.ReadDouble();
                break;
              }
              case 16: {
                Rate = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class test_python_all : pb::IMessage<test_python_all> {
    private static readonly pb::MessageParser<test_python_all> _parser = new pb::MessageParser<test_python_all>(() => new test_python_all());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<test_python_all> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bestan.Common.Config.TemplateBaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test_python_all() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test_python_all(test_python_all other) : this() {
      configs_ = other.configs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test_python_all Clone() {
      return new test_python_all(this);
    }

    /// <summary>Field number for the "configs" field.</summary>
    public const int ConfigsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Bestan.Common.Config.test_python>.Codec _map_configs_codec
        = new pbc::MapField<int, global::Bestan.Common.Config.test_python>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Bestan.Common.Config.test_python.Parser), 10);
    private readonly pbc::MapField<int, global::Bestan.Common.Config.test_python> configs_ = new pbc::MapField<int, global::Bestan.Common.Config.test_python>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Bestan.Common.Config.test_python> Configs {
      get { return configs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as test_python_all);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(test_python_all other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Configs.Equals(other.Configs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Configs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      configs_.WriteTo(output, _map_configs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += configs_.CalculateSize(_map_configs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(test_python_all other) {
      if (other == null) {
        return;
      }
      configs_.Add(other.configs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            configs_.AddEntriesFrom(input, _map_configs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
