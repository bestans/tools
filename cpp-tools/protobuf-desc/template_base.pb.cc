// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template_base.proto

#include "template_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_template_5fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_excel_cell_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_excel_proto_AllProtoEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_excel_section;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_test_python_skill_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_excel_line_data;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_excel_path_cell;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_excel_path_full;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_excel_table_TableEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_test_python;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_template_5fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_test_python_all_ConfigsEntry_DoNotUse;
}  // namespace protobuf_template_5fbase_2eproto
namespace bestan {
namespace common {
namespace config {
class excel_sectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_section>
      _instance;
} _excel_section_default_instance_;
class excel_path_cellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_path_cell>
      _instance;
} _excel_path_cell_default_instance_;
class excel_path_fullDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_path_full>
      _instance;
} _excel_path_full_default_instance_;
class excel_cell_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_cell_data>
      _instance;
} _excel_cell_data_default_instance_;
class excel_line_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_line_data>
      _instance;
} _excel_line_data_default_instance_;
class excel_table_TableEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_table_TableEntry_DoNotUse>
      _instance;
} _excel_table_TableEntry_DoNotUse_default_instance_;
class excel_tableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_table>
      _instance;
} _excel_table_default_instance_;
class excel_proto_AllProtoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_proto_AllProtoEntry_DoNotUse>
      _instance;
} _excel_proto_AllProtoEntry_DoNotUse_default_instance_;
class excel_protoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<excel_proto>
      _instance;
} _excel_proto_default_instance_;
class test_python_skill_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<test_python_skill_data>
      _instance;
} _test_python_skill_data_default_instance_;
class test_pythonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<test_python>
      _instance;
} _test_python_default_instance_;
class test_python_all_ConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<test_python_all_ConfigsEntry_DoNotUse>
      _instance;
} _test_python_all_ConfigsEntry_DoNotUse_default_instance_;
class test_python_allDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<test_python_all>
      _instance;
} _test_python_all_default_instance_;
}  // namespace config
}  // namespace common
}  // namespace bestan
namespace protobuf_template_5fbase_2eproto {
static void InitDefaultsexcel_section() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_section_default_instance_;
    new (ptr) ::bestan::common::config::excel_section();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_section::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_excel_section =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsexcel_section}, {}};

static void InitDefaultsexcel_path_cell() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_path_cell_default_instance_;
    new (ptr) ::bestan::common::config::excel_path_cell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_path_cell::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_excel_path_cell =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsexcel_path_cell}, {
      &protobuf_template_5fbase_2eproto::scc_info_excel_section.base,}};

static void InitDefaultsexcel_path_full() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_path_full_default_instance_;
    new (ptr) ::bestan::common::config::excel_path_full();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_path_full::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_excel_path_full =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsexcel_path_full}, {
      &protobuf_template_5fbase_2eproto::scc_info_excel_path_cell.base,}};

static void InitDefaultsexcel_cell_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_cell_data_default_instance_;
    new (ptr) ::bestan::common::config::excel_cell_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_cell_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_excel_cell_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsexcel_cell_data}, {}};

static void InitDefaultsexcel_line_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_line_data_default_instance_;
    new (ptr) ::bestan::common::config::excel_line_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_line_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_excel_line_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsexcel_line_data}, {
      &protobuf_template_5fbase_2eproto::scc_info_excel_cell_data.base,}};

static void InitDefaultsexcel_table_TableEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_table_TableEntry_DoNotUse_default_instance_;
    new (ptr) ::bestan::common::config::excel_table_TableEntry_DoNotUse();
  }
  ::bestan::common::config::excel_table_TableEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_excel_table_TableEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsexcel_table_TableEntry_DoNotUse}, {
      &protobuf_template_5fbase_2eproto::scc_info_excel_line_data.base,}};

static void InitDefaultsexcel_table() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_table_default_instance_;
    new (ptr) ::bestan::common::config::excel_table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_table::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_excel_table =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsexcel_table}, {
      &protobuf_template_5fbase_2eproto::scc_info_excel_path_full.base,
      &protobuf_template_5fbase_2eproto::scc_info_excel_table_TableEntry_DoNotUse.base,}};

static void InitDefaultsexcel_proto_AllProtoEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_proto_AllProtoEntry_DoNotUse_default_instance_;
    new (ptr) ::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse();
  }
  ::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_excel_proto_AllProtoEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsexcel_proto_AllProtoEntry_DoNotUse}, {}};

static void InitDefaultsexcel_proto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_excel_proto_default_instance_;
    new (ptr) ::bestan::common::config::excel_proto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::excel_proto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_excel_proto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsexcel_proto}, {
      &protobuf_template_5fbase_2eproto::scc_info_excel_proto_AllProtoEntry_DoNotUse.base,}};

static void InitDefaultstest_python_skill_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_test_python_skill_data_default_instance_;
    new (ptr) ::bestan::common::config::test_python_skill_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::test_python_skill_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_test_python_skill_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstest_python_skill_data}, {}};

static void InitDefaultstest_python() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_test_python_default_instance_;
    new (ptr) ::bestan::common::config::test_python();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::test_python::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_test_python =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultstest_python}, {
      &protobuf_template_5fbase_2eproto::scc_info_test_python_skill_data.base,}};

static void InitDefaultstest_python_all_ConfigsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_test_python_all_ConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse();
  }
  ::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_test_python_all_ConfigsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultstest_python_all_ConfigsEntry_DoNotUse}, {
      &protobuf_template_5fbase_2eproto::scc_info_test_python.base,}};

static void InitDefaultstest_python_all() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestan::common::config::_test_python_all_default_instance_;
    new (ptr) ::bestan::common::config::test_python_all();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestan::common::config::test_python_all::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_test_python_all =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultstest_python_all}, {
      &protobuf_template_5fbase_2eproto::scc_info_test_python_all_ConfigsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_excel_section.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_path_cell.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_path_full.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_cell_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_line_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_table_TableEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_table.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_proto_AllProtoEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_excel_proto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_test_python_skill_data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_test_python.base);
  ::google::protobuf::internal::InitSCC(&scc_info_test_python_all_ConfigsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_test_python_all.base);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_section, section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_section, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_section, data_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_path_cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_path_cell, cell_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_path_full, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_path_full, paths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, int32_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, int64_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, bytes_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, float_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_cell_data, double_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_line_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_line_data, cell_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table_TableEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table_TableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table_TableEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table_TableEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table, proto_msg_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_table, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::excel_proto, all_proto_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_skill_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_skill_data, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_skill_data, rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python, skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_all, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::bestan::common::config::test_python_all, configs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bestan::common::config::excel_section)},
  { 8, -1, sizeof(::bestan::common::config::excel_path_cell)},
  { 14, -1, sizeof(::bestan::common::config::excel_path_full)},
  { 20, -1, sizeof(::bestan::common::config::excel_cell_data)},
  { 31, -1, sizeof(::bestan::common::config::excel_line_data)},
  { 37, 44, sizeof(::bestan::common::config::excel_table_TableEntry_DoNotUse)},
  { 46, -1, sizeof(::bestan::common::config::excel_table)},
  { 54, 61, sizeof(::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse)},
  { 63, -1, sizeof(::bestan::common::config::excel_proto)},
  { 69, -1, sizeof(::bestan::common::config::test_python_skill_data)},
  { 76, -1, sizeof(::bestan::common::config::test_python)},
  { 84, 91, sizeof(::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse)},
  { 93, -1, sizeof(::bestan::common::config::test_python_all)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_section_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_path_cell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_path_full_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_cell_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_line_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_table_TableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_proto_AllProtoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_excel_proto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_test_python_skill_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_test_python_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_test_python_all_ConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bestan::common::config::_test_python_all_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "template_base.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023template_base.proto\022\024bestan.common.con"
      "fig\"\267\001\n\rexcel_section\022\017\n\007section\030\001 \001(\014\022\r"
      "\n\005index\030\002 \001(\005\022@\n\tdata_type\030\003 \001(\0162-.besta"
      "n.common.config.excel_section.DATA_TYPE\""
      "D\n\tDATA_TYPE\022\t\n\005INT32\020\000\022\t\n\005INT64\020\001\022\n\n\006ST"
      "RING\020\002\022\t\n\005FLOAT\020\003\022\n\n\006DOUBLE\020\004\"I\n\017excel_p"
      "ath_cell\0226\n\tcell_path\030\001 \003(\0132#.bestan.com"
      "mon.config.excel_section\"G\n\017excel_path_f"
      "ull\0224\n\005paths\030\001 \003(\0132%.bestan.common.confi"
      "g.excel_path_cell\"\205\002\n\017excel_cell_data\022B\n"
      "\tdata_type\030\001 \001(\0162/.bestan.common.config."
      "excel_cell_data.DATA_TYPE\022\023\n\013int32_value"
      "\030\002 \001(\005\022\023\n\013int64_value\030\003 \001(\003\022\023\n\013bytes_val"
      "ue\030\004 \001(\014\022\023\n\013float_value\030\005 \001(\002\022\024\n\014double_"
      "value\030\006 \001(\001\"D\n\tDATA_TYPE\022\t\n\005INT32\020\000\022\t\n\005I"
      "NT64\020\001\022\n\n\006STRING\020\002\022\t\n\005FLOAT\020\003\022\n\n\006DOUBLE\020"
      "\004\"K\n\017excel_line_data\0228\n\tcell_data\030\001 \003(\0132"
      "%.bestan.common.config.excel_cell_data\"\354"
      "\001\n\013excel_table\022\026\n\016proto_msg_name\030\001 \001(\014\0223"
      "\n\004path\030\002 \001(\0132%.bestan.common.config.exce"
      "l_path_full\022;\n\005table\030\003 \003(\0132,.bestan.comm"
      "on.config.excel_table.TableEntry\032S\n\nTabl"
      "eEntry\022\013\n\003key\030\001 \001(\005\0224\n\005value\030\002 \001(\0132%.bes"
      "tan.common.config.excel_line_data:\0028\001\"\202\001"
      "\n\013excel_proto\022B\n\tall_proto\030\001 \003(\0132/.besta"
      "n.common.config.excel_proto.AllProtoEntr"
      "y\032/\n\rAllProtoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
      "\030\002 \001(\014:\0028\001\"\215\001\n\013test_python\022\n\n\002id\030\001 \001(\003\022\r"
      "\n\005count\030\002 \001(\005\022;\n\005skill\030\003 \001(\0132,.bestan.co"
      "mmon.config.test_python.skill_data\032&\n\nsk"
      "ill_data\022\n\n\002id\030\001 \001(\005\022\014\n\004rate\030\002 \001(\005\"\251\001\n\017t"
      "est_python_all\022C\n\007configs\030\001 \003(\01322.bestan"
      ".common.config.test_python_all.ConfigsEn"
      "try\032Q\n\014ConfigsEntry\022\013\n\003key\030\001 \001(\005\0220\n\005valu"
      "e\030\002 \001(\0132!.bestan.common.config.test_pyth"
      "on:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "template_base.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_template_5fbase_2eproto
namespace bestan {
namespace common {
namespace config {
const ::google::protobuf::EnumDescriptor* excel_section_DATA_TYPE_descriptor() {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_template_5fbase_2eproto::file_level_enum_descriptors[0];
}
bool excel_section_DATA_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const excel_section_DATA_TYPE excel_section::INT32;
const excel_section_DATA_TYPE excel_section::INT64;
const excel_section_DATA_TYPE excel_section::STRING;
const excel_section_DATA_TYPE excel_section::FLOAT;
const excel_section_DATA_TYPE excel_section::DOUBLE;
const excel_section_DATA_TYPE excel_section::DATA_TYPE_MIN;
const excel_section_DATA_TYPE excel_section::DATA_TYPE_MAX;
const int excel_section::DATA_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* excel_cell_data_DATA_TYPE_descriptor() {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_template_5fbase_2eproto::file_level_enum_descriptors[1];
}
bool excel_cell_data_DATA_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const excel_cell_data_DATA_TYPE excel_cell_data::INT32;
const excel_cell_data_DATA_TYPE excel_cell_data::INT64;
const excel_cell_data_DATA_TYPE excel_cell_data::STRING;
const excel_cell_data_DATA_TYPE excel_cell_data::FLOAT;
const excel_cell_data_DATA_TYPE excel_cell_data::DOUBLE;
const excel_cell_data_DATA_TYPE excel_cell_data::DATA_TYPE_MIN;
const excel_cell_data_DATA_TYPE excel_cell_data::DATA_TYPE_MAX;
const int excel_cell_data::DATA_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void excel_section::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_section::kSectionFieldNumber;
const int excel_section::kIndexFieldNumber;
const int excel_section::kDataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_section::excel_section()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_section.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_section)
}
excel_section::excel_section(const excel_section& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.section().size() > 0) {
    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_section)
}

void excel_section::SharedCtor() {
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(data_type_));
}

excel_section::~excel_section() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_section)
  SharedDtor();
}

void excel_section::SharedDtor() {
  section_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void excel_section::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_section::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_section& excel_section::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_section.base);
  return *internal_default_instance();
}


void excel_section::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(data_type_));
  _internal_metadata_.Clear();
}

bool excel_section::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_section)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes section = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_section()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bestan.common.config.excel_section.DATA_TYPE data_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::bestan::common::config::excel_section_DATA_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_section)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_section)
  return false;
#undef DO_
}

void excel_section::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes section = 1;
  if (this->section().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->section(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // .bestan.common.config.excel_section.DATA_TYPE data_type = 3;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_section)
}

::google::protobuf::uint8* excel_section::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_section)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes section = 1;
  if (this->section().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->section(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // .bestan.common.config.excel_section.DATA_TYPE data_type = 3;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_section)
  return target;
}

size_t excel_section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_section)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes section = 1;
  if (this->section().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->section());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // .bestan.common.config.excel_section.DATA_TYPE data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_section::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_section)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_section* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_section>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_section)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_section)
    MergeFrom(*source);
  }
}

void excel_section::MergeFrom(const excel_section& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_section)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.section().size() > 0) {

    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
}

void excel_section::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_section::CopyFrom(const excel_section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_section::IsInitialized() const {
  return true;
}

void excel_section::Swap(excel_section* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_section::InternalSwap(excel_section* other) {
  using std::swap;
  section_.Swap(&other->section_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(data_type_, other->data_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_section::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void excel_path_cell::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_path_cell::kCellPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_path_cell::excel_path_cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_path_cell.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_path_cell)
}
excel_path_cell::excel_path_cell(const excel_path_cell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cell_path_(from.cell_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_path_cell)
}

void excel_path_cell::SharedCtor() {
}

excel_path_cell::~excel_path_cell() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_path_cell)
  SharedDtor();
}

void excel_path_cell::SharedDtor() {
}

void excel_path_cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_path_cell::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_path_cell& excel_path_cell::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_path_cell.base);
  return *internal_default_instance();
}


void excel_path_cell::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_path_cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_path_.Clear();
  _internal_metadata_.Clear();
}

bool excel_path_cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_path_cell)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bestan.common.config.excel_section cell_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cell_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_path_cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_path_cell)
  return false;
#undef DO_
}

void excel_path_cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_path_cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bestan.common.config.excel_section cell_path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cell_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cell_path(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_path_cell)
}

::google::protobuf::uint8* excel_path_cell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_path_cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bestan.common.config.excel_section cell_path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cell_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cell_path(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_path_cell)
  return target;
}

size_t excel_path_cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_path_cell)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .bestan.common.config.excel_section cell_path = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cell_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cell_path(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_path_cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_path_cell)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_path_cell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_path_cell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_path_cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_path_cell)
    MergeFrom(*source);
  }
}

void excel_path_cell::MergeFrom(const excel_path_cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_path_cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_path_.MergeFrom(from.cell_path_);
}

void excel_path_cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_path_cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_path_cell::CopyFrom(const excel_path_cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_path_cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_path_cell::IsInitialized() const {
  return true;
}

void excel_path_cell::Swap(excel_path_cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_path_cell::InternalSwap(excel_path_cell* other) {
  using std::swap;
  CastToBase(&cell_path_)->InternalSwap(CastToBase(&other->cell_path_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_path_cell::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void excel_path_full::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_path_full::kPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_path_full::excel_path_full()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_path_full.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_path_full)
}
excel_path_full::excel_path_full(const excel_path_full& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_path_full)
}

void excel_path_full::SharedCtor() {
}

excel_path_full::~excel_path_full() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_path_full)
  SharedDtor();
}

void excel_path_full::SharedDtor() {
}

void excel_path_full::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_path_full::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_path_full& excel_path_full::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_path_full.base);
  return *internal_default_instance();
}


void excel_path_full::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_path_full)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear();
}

bool excel_path_full::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_path_full)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bestan.common.config.excel_path_cell paths = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_path_full)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_path_full)
  return false;
#undef DO_
}

void excel_path_full::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_path_full)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bestan.common.config.excel_path_cell paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->paths(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_path_full)
}

::google::protobuf::uint8* excel_path_full::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_path_full)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bestan.common.config.excel_path_cell paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->paths(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_path_full)
  return target;
}

size_t excel_path_full::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_path_full)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .bestan.common.config.excel_path_cell paths = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paths(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_path_full::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_path_full)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_path_full* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_path_full>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_path_full)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_path_full)
    MergeFrom(*source);
  }
}

void excel_path_full::MergeFrom(const excel_path_full& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_path_full)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
}

void excel_path_full::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_path_full)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_path_full::CopyFrom(const excel_path_full& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_path_full)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_path_full::IsInitialized() const {
  return true;
}

void excel_path_full::Swap(excel_path_full* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_path_full::InternalSwap(excel_path_full* other) {
  using std::swap;
  CastToBase(&paths_)->InternalSwap(CastToBase(&other->paths_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_path_full::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void excel_cell_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_cell_data::kDataTypeFieldNumber;
const int excel_cell_data::kInt32ValueFieldNumber;
const int excel_cell_data::kInt64ValueFieldNumber;
const int excel_cell_data::kBytesValueFieldNumber;
const int excel_cell_data::kFloatValueFieldNumber;
const int excel_cell_data::kDoubleValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_cell_data::excel_cell_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_cell_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_cell_data)
}
excel_cell_data::excel_cell_data(const excel_cell_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bytes_value().size() > 0) {
    bytes_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_value_);
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_cell_data)
}

void excel_cell_data::SharedCtor() {
  bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_value_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(float_value_));
}

excel_cell_data::~excel_cell_data() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_cell_data)
  SharedDtor();
}

void excel_cell_data::SharedDtor() {
  bytes_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void excel_cell_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_cell_data::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_cell_data& excel_cell_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_cell_data.base);
  return *internal_default_instance();
}


void excel_cell_data::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_cell_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_value_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(float_value_));
  _internal_metadata_.Clear();
}

bool excel_cell_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_cell_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bestan.common.config.excel_cell_data.DATA_TYPE data_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::bestan::common::config::excel_cell_data_DATA_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int32_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int64_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bytes_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_cell_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_cell_data)
  return false;
#undef DO_
}

void excel_cell_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_cell_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestan.common.config.excel_cell_data.DATA_TYPE data_type = 1;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // int32 int32_value = 2;
  if (this->int32_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int32_value(), output);
  }

  // int64 int64_value = 3;
  if (this->int64_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int64_value(), output);
  }

  // bytes bytes_value = 4;
  if (this->bytes_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bytes_value(), output);
  }

  // float float_value = 5;
  if (this->float_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->float_value(), output);
  }

  // double double_value = 6;
  if (this->double_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->double_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_cell_data)
}

::google::protobuf::uint8* excel_cell_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_cell_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestan.common.config.excel_cell_data.DATA_TYPE data_type = 1;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // int32 int32_value = 2;
  if (this->int32_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int32_value(), target);
  }

  // int64 int64_value = 3;
  if (this->int64_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int64_value(), target);
  }

  // bytes bytes_value = 4;
  if (this->bytes_value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bytes_value(), target);
  }

  // float float_value = 5;
  if (this->float_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->float_value(), target);
  }

  // double double_value = 6;
  if (this->double_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->double_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_cell_data)
  return target;
}

size_t excel_cell_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_cell_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes bytes_value = 4;
  if (this->bytes_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes_value());
  }

  // .bestan.common.config.excel_cell_data.DATA_TYPE data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // int32 int32_value = 2;
  if (this->int32_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int32_value());
  }

  // int64 int64_value = 3;
  if (this->int64_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->int64_value());
  }

  // double double_value = 6;
  if (this->double_value() != 0) {
    total_size += 1 + 8;
  }

  // float float_value = 5;
  if (this->float_value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_cell_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_cell_data)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_cell_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_cell_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_cell_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_cell_data)
    MergeFrom(*source);
  }
}

void excel_cell_data::MergeFrom(const excel_cell_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_cell_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes_value().size() > 0) {

    bytes_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_value_);
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.int32_value() != 0) {
    set_int32_value(from.int32_value());
  }
  if (from.int64_value() != 0) {
    set_int64_value(from.int64_value());
  }
  if (from.double_value() != 0) {
    set_double_value(from.double_value());
  }
  if (from.float_value() != 0) {
    set_float_value(from.float_value());
  }
}

void excel_cell_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_cell_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_cell_data::CopyFrom(const excel_cell_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_cell_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_cell_data::IsInitialized() const {
  return true;
}

void excel_cell_data::Swap(excel_cell_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_cell_data::InternalSwap(excel_cell_data* other) {
  using std::swap;
  bytes_value_.Swap(&other->bytes_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
  swap(int32_value_, other->int32_value_);
  swap(int64_value_, other->int64_value_);
  swap(double_value_, other->double_value_);
  swap(float_value_, other->float_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_cell_data::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void excel_line_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_line_data::kCellDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_line_data::excel_line_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_line_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_line_data)
}
excel_line_data::excel_line_data(const excel_line_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cell_data_(from.cell_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_line_data)
}

void excel_line_data::SharedCtor() {
}

excel_line_data::~excel_line_data() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_line_data)
  SharedDtor();
}

void excel_line_data::SharedDtor() {
}

void excel_line_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_line_data::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_line_data& excel_line_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_line_data.base);
  return *internal_default_instance();
}


void excel_line_data::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_line_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_data_.Clear();
  _internal_metadata_.Clear();
}

bool excel_line_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_line_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bestan.common.config.excel_cell_data cell_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cell_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_line_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_line_data)
  return false;
#undef DO_
}

void excel_line_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_line_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bestan.common.config.excel_cell_data cell_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cell_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cell_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_line_data)
}

::google::protobuf::uint8* excel_line_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_line_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bestan.common.config.excel_cell_data cell_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cell_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cell_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_line_data)
  return target;
}

size_t excel_line_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_line_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .bestan.common.config.excel_cell_data cell_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cell_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cell_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_line_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_line_data)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_line_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_line_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_line_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_line_data)
    MergeFrom(*source);
  }
}

void excel_line_data::MergeFrom(const excel_line_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_line_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_data_.MergeFrom(from.cell_data_);
}

void excel_line_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_line_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_line_data::CopyFrom(const excel_line_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_line_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_line_data::IsInitialized() const {
  return true;
}

void excel_line_data::Swap(excel_line_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_line_data::InternalSwap(excel_line_data* other) {
  using std::swap;
  CastToBase(&cell_data_)->InternalSwap(CastToBase(&other->cell_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_line_data::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

excel_table_TableEntry_DoNotUse::excel_table_TableEntry_DoNotUse() {}
excel_table_TableEntry_DoNotUse::excel_table_TableEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void excel_table_TableEntry_DoNotUse::MergeFrom(const excel_table_TableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata excel_table_TableEntry_DoNotUse::GetMetadata() const {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[5];
}
void excel_table_TableEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void excel_table::InitAsDefaultInstance() {
  ::bestan::common::config::_excel_table_default_instance_._instance.get_mutable()->path_ = const_cast< ::bestan::common::config::excel_path_full*>(
      ::bestan::common::config::excel_path_full::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_table::kProtoMsgNameFieldNumber;
const int excel_table::kPathFieldNumber;
const int excel_table::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_table::excel_table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_table.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_table)
}
excel_table::excel_table(const excel_table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.MergeFrom(from.table_);
  proto_msg_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proto_msg_name().size() > 0) {
    proto_msg_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_msg_name_);
  }
  if (from.has_path()) {
    path_ = new ::bestan::common::config::excel_path_full(*from.path_);
  } else {
    path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_table)
}

void excel_table::SharedCtor() {
  proto_msg_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = NULL;
}

excel_table::~excel_table() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_table)
  SharedDtor();
}

void excel_table::SharedDtor() {
  proto_msg_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void excel_table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_table::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_table& excel_table::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_table.base);
  return *internal_default_instance();
}


void excel_table::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  proto_msg_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  _internal_metadata_.Clear();
}

bool excel_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_table)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes proto_msg_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_msg_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bestan.common.config.excel_path_full path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .bestan.common.config.excel_line_data> table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          excel_table_TableEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              excel_table_TableEntry_DoNotUse,
              ::google::protobuf::int32, ::bestan::common::config::excel_line_data,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data > > parser(&table_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_table)
  return false;
#undef DO_
}

void excel_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proto_msg_name = 1;
  if (this->proto_msg_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->proto_msg_name(), output);
  }

  // .bestan.common.config.excel_path_full path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_path(), output);
  }

  // map<int32, .bestan.common.config.excel_line_data> table = 3;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<excel_table_TableEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::std::unique_ptr<excel_table_TableEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_table)
}

::google::protobuf::uint8* excel_table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proto_msg_name = 1;
  if (this->proto_msg_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->proto_msg_name(), target);
  }

  // .bestan.common.config.excel_path_full path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_path(), deterministic, target);
  }

  // map<int32, .bestan.common.config.excel_line_data> table = 3;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<excel_table_TableEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<excel_table_TableEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_table)
  return target;
}

size_t excel_table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .bestan.common.config.excel_line_data> table = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->table_size());
  {
    ::std::unique_ptr<excel_table_TableEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::excel_line_data >::const_iterator
        it = this->table().begin();
        it != this->table().end(); ++it) {
      entry.reset(table_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes proto_msg_name = 1;
  if (this->proto_msg_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proto_msg_name());
  }

  // .bestan.common.config.excel_path_full path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_table)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_table)
    MergeFrom(*source);
  }
}

void excel_table::MergeFrom(const excel_table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  if (from.proto_msg_name().size() > 0) {

    proto_msg_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_msg_name_);
  }
  if (from.has_path()) {
    mutable_path()->::bestan::common::config::excel_path_full::MergeFrom(from.path());
  }
}

void excel_table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_table::CopyFrom(const excel_table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_table::IsInitialized() const {
  return true;
}

void excel_table::Swap(excel_table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_table::InternalSwap(excel_table* other) {
  using std::swap;
  table_.Swap(&other->table_);
  proto_msg_name_.Swap(&other->proto_msg_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_table::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

excel_proto_AllProtoEntry_DoNotUse::excel_proto_AllProtoEntry_DoNotUse() {}
excel_proto_AllProtoEntry_DoNotUse::excel_proto_AllProtoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void excel_proto_AllProtoEntry_DoNotUse::MergeFrom(const excel_proto_AllProtoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata excel_proto_AllProtoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[7];
}
void excel_proto_AllProtoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void excel_proto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int excel_proto::kAllProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

excel_proto::excel_proto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_excel_proto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.excel_proto)
}
excel_proto::excel_proto(const excel_proto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  all_proto_.MergeFrom(from.all_proto_);
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.excel_proto)
}

void excel_proto::SharedCtor() {
}

excel_proto::~excel_proto() {
  // @@protoc_insertion_point(destructor:bestan.common.config.excel_proto)
  SharedDtor();
}

void excel_proto::SharedDtor() {
}

void excel_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* excel_proto::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const excel_proto& excel_proto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_excel_proto.base);
  return *internal_default_instance();
}


void excel_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.excel_proto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_proto_.Clear();
  _internal_metadata_.Clear();
}

bool excel_proto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.excel_proto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bytes> all_proto = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          excel_proto_AllProtoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              excel_proto_AllProtoEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&all_proto_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bestan.common.config.excel_proto.AllProtoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.excel_proto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.excel_proto)
  return false;
#undef DO_
}

void excel_proto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.excel_proto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> all_proto = 1;
  if (!this->all_proto().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bestan.common.config.excel_proto.AllProtoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->all_proto().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->all_proto().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->all_proto().begin();
          it != this->all_proto().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<excel_proto_AllProtoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(all_proto_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<excel_proto_AllProtoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->all_proto().begin();
          it != this->all_proto().end(); ++it) {
        entry.reset(all_proto_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.excel_proto)
}

::google::protobuf::uint8* excel_proto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.excel_proto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> all_proto = 1;
  if (!this->all_proto().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "bestan.common.config.excel_proto.AllProtoEntry.key");
      }
    };

    if (deterministic &&
        this->all_proto().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->all_proto().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->all_proto().begin();
          it != this->all_proto().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<excel_proto_AllProtoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(all_proto_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<excel_proto_AllProtoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->all_proto().begin();
          it != this->all_proto().end(); ++it) {
        entry.reset(all_proto_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.excel_proto)
  return target;
}

size_t excel_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.excel_proto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, bytes> all_proto = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->all_proto_size());
  {
    ::std::unique_ptr<excel_proto_AllProtoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->all_proto().begin();
        it != this->all_proto().end(); ++it) {
      entry.reset(all_proto_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void excel_proto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.excel_proto)
  GOOGLE_DCHECK_NE(&from, this);
  const excel_proto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const excel_proto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.excel_proto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.excel_proto)
    MergeFrom(*source);
  }
}

void excel_proto::MergeFrom(const excel_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.excel_proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_proto_.MergeFrom(from.all_proto_);
}

void excel_proto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.excel_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excel_proto::CopyFrom(const excel_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.excel_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excel_proto::IsInitialized() const {
  return true;
}

void excel_proto::Swap(excel_proto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void excel_proto::InternalSwap(excel_proto* other) {
  using std::swap;
  all_proto_.Swap(&other->all_proto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata excel_proto::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void test_python_skill_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int test_python_skill_data::kIdFieldNumber;
const int test_python_skill_data::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

test_python_skill_data::test_python_skill_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_test_python_skill_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.test_python.skill_data)
}
test_python_skill_data::test_python_skill_data(const test_python_skill_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.test_python.skill_data)
}

void test_python_skill_data::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rate_));
}

test_python_skill_data::~test_python_skill_data() {
  // @@protoc_insertion_point(destructor:bestan.common.config.test_python.skill_data)
  SharedDtor();
}

void test_python_skill_data::SharedDtor() {
}

void test_python_skill_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* test_python_skill_data::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const test_python_skill_data& test_python_skill_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_test_python_skill_data.base);
  return *internal_default_instance();
}


void test_python_skill_data::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.test_python.skill_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rate_));
  _internal_metadata_.Clear();
}

bool test_python_skill_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.test_python.skill_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.test_python.skill_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.test_python.skill_data)
  return false;
#undef DO_
}

void test_python_skill_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.test_python.skill_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 rate = 2;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.test_python.skill_data)
}

::google::protobuf::uint8* test_python_skill_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.test_python.skill_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 rate = 2;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.test_python.skill_data)
  return target;
}

size_t test_python_skill_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.test_python.skill_data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 rate = 2;
  if (this->rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void test_python_skill_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.test_python.skill_data)
  GOOGLE_DCHECK_NE(&from, this);
  const test_python_skill_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const test_python_skill_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.test_python.skill_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.test_python.skill_data)
    MergeFrom(*source);
  }
}

void test_python_skill_data::MergeFrom(const test_python_skill_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.test_python.skill_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rate() != 0) {
    set_rate(from.rate());
  }
}

void test_python_skill_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.test_python.skill_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_python_skill_data::CopyFrom(const test_python_skill_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.test_python.skill_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_python_skill_data::IsInitialized() const {
  return true;
}

void test_python_skill_data::Swap(test_python_skill_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void test_python_skill_data::InternalSwap(test_python_skill_data* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(rate_, other->rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata test_python_skill_data::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void test_python::InitAsDefaultInstance() {
  ::bestan::common::config::_test_python_default_instance_._instance.get_mutable()->skill_ = const_cast< ::bestan::common::config::test_python_skill_data*>(
      ::bestan::common::config::test_python_skill_data::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int test_python::kIdFieldNumber;
const int test_python::kCountFieldNumber;
const int test_python::kSkillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

test_python::test_python()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_test_python.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.test_python)
}
test_python::test_python(const test_python& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_skill()) {
    skill_ = new ::bestan::common::config::test_python_skill_data(*from.skill_);
  } else {
    skill_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.test_python)
}

void test_python::SharedCtor() {
  ::memset(&skill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&skill_)) + sizeof(count_));
}

test_python::~test_python() {
  // @@protoc_insertion_point(destructor:bestan.common.config.test_python)
  SharedDtor();
}

void test_python::SharedDtor() {
  if (this != internal_default_instance()) delete skill_;
}

void test_python::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* test_python::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const test_python& test_python::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_test_python.base);
  return *internal_default_instance();
}


void test_python::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.test_python)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && skill_ != NULL) {
    delete skill_;
  }
  skill_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool test_python::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.test_python)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bestan.common.config.test_python.skill_data skill = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.test_python)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.test_python)
  return false;
#undef DO_
}

void test_python::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.test_python)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // .bestan.common.config.test_python.skill_data skill = 3;
  if (this->has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_skill(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.test_python)
}

::google::protobuf::uint8* test_python::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.test_python)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // .bestan.common.config.test_python.skill_data skill = 3;
  if (this->has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_skill(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.test_python)
  return target;
}

size_t test_python::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.test_python)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .bestan.common.config.test_python.skill_data skill = 3;
  if (this->has_skill()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *skill_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void test_python::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.test_python)
  GOOGLE_DCHECK_NE(&from, this);
  const test_python* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const test_python>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.test_python)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.test_python)
    MergeFrom(*source);
  }
}

void test_python::MergeFrom(const test_python& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.test_python)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_skill()) {
    mutable_skill()->::bestan::common::config::test_python_skill_data::MergeFrom(from.skill());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void test_python::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.test_python)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_python::CopyFrom(const test_python& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.test_python)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_python::IsInitialized() const {
  return true;
}

void test_python::Swap(test_python* other) {
  if (other == this) return;
  InternalSwap(other);
}
void test_python::InternalSwap(test_python* other) {
  using std::swap;
  swap(skill_, other->skill_);
  swap(id_, other->id_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata test_python::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

test_python_all_ConfigsEntry_DoNotUse::test_python_all_ConfigsEntry_DoNotUse() {}
test_python_all_ConfigsEntry_DoNotUse::test_python_all_ConfigsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void test_python_all_ConfigsEntry_DoNotUse::MergeFrom(const test_python_all_ConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata test_python_all_ConfigsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[11];
}
void test_python_all_ConfigsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void test_python_all::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int test_python_all::kConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

test_python_all::test_python_all()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_template_5fbase_2eproto::scc_info_test_python_all.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bestan.common.config.test_python_all)
}
test_python_all::test_python_all(const test_python_all& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configs_.MergeFrom(from.configs_);
  // @@protoc_insertion_point(copy_constructor:bestan.common.config.test_python_all)
}

void test_python_all::SharedCtor() {
}

test_python_all::~test_python_all() {
  // @@protoc_insertion_point(destructor:bestan.common.config.test_python_all)
  SharedDtor();
}

void test_python_all::SharedDtor() {
}

void test_python_all::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* test_python_all::descriptor() {
  ::protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const test_python_all& test_python_all::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_template_5fbase_2eproto::scc_info_test_python_all.base);
  return *internal_default_instance();
}


void test_python_all::Clear() {
// @@protoc_insertion_point(message_clear_start:bestan.common.config.test_python_all)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  _internal_metadata_.Clear();
}

bool test_python_all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bestan.common.config.test_python_all)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .bestan.common.config.test_python> configs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          test_python_all_ConfigsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              test_python_all_ConfigsEntry_DoNotUse,
              ::google::protobuf::int32, ::bestan::common::config::test_python,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python > > parser(&configs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bestan.common.config.test_python_all)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bestan.common.config.test_python_all)
  return false;
#undef DO_
}

void test_python_all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bestan.common.config.test_python_all)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .bestan.common.config.test_python> configs = 1;
  if (!this->configs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->configs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<test_python_all_ConfigsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(configs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::std::unique_ptr<test_python_all_ConfigsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it) {
        entry.reset(configs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:bestan.common.config.test_python_all)
}

::google::protobuf::uint8* test_python_all::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bestan.common.config.test_python_all)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .bestan.common.config.test_python> configs = 1;
  if (!this->configs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->configs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<test_python_all_ConfigsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(configs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<test_python_all_ConfigsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_iterator
          it = this->configs().begin();
          it != this->configs().end(); ++it) {
        entry.reset(configs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestan.common.config.test_python_all)
  return target;
}

size_t test_python_all::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestan.common.config.test_python_all)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .bestan.common.config.test_python> configs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->configs_size());
  {
    ::std::unique_ptr<test_python_all_ConfigsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::bestan::common::config::test_python >::const_iterator
        it = this->configs().begin();
        it != this->configs().end(); ++it) {
      entry.reset(configs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void test_python_all::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestan.common.config.test_python_all)
  GOOGLE_DCHECK_NE(&from, this);
  const test_python_all* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const test_python_all>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestan.common.config.test_python_all)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestan.common.config.test_python_all)
    MergeFrom(*source);
  }
}

void test_python_all::MergeFrom(const test_python_all& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestan.common.config.test_python_all)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void test_python_all::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestan.common.config.test_python_all)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_python_all::CopyFrom(const test_python_all& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestan.common.config.test_python_all)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_python_all::IsInitialized() const {
  return true;
}

void test_python_all::Swap(test_python_all* other) {
  if (other == this) return;
  InternalSwap(other);
}
void test_python_all::InternalSwap(test_python_all* other) {
  using std::swap;
  configs_.Swap(&other->configs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata test_python_all::GetMetadata() const {
  protobuf_template_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_template_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace common
}  // namespace bestan
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_section* Arena::CreateMaybeMessage< ::bestan::common::config::excel_section >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_section >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_path_cell* Arena::CreateMaybeMessage< ::bestan::common::config::excel_path_cell >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_path_cell >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_path_full* Arena::CreateMaybeMessage< ::bestan::common::config::excel_path_full >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_path_full >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_cell_data* Arena::CreateMaybeMessage< ::bestan::common::config::excel_cell_data >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_cell_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_line_data* Arena::CreateMaybeMessage< ::bestan::common::config::excel_line_data >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_line_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_table_TableEntry_DoNotUse* Arena::CreateMaybeMessage< ::bestan::common::config::excel_table_TableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_table_TableEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_table* Arena::CreateMaybeMessage< ::bestan::common::config::excel_table >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_table >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse* Arena::CreateMaybeMessage< ::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_proto_AllProtoEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::excel_proto* Arena::CreateMaybeMessage< ::bestan::common::config::excel_proto >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::excel_proto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::test_python_skill_data* Arena::CreateMaybeMessage< ::bestan::common::config::test_python_skill_data >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::test_python_skill_data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::test_python* Arena::CreateMaybeMessage< ::bestan::common::config::test_python >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::test_python >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::test_python_all_ConfigsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bestan::common::config::test_python_all* Arena::CreateMaybeMessage< ::bestan::common::config::test_python_all >(Arena* arena) {
  return Arena::CreateInternal< ::bestan::common::config::test_python_all >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
